# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    # Maven Package Caching     
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    # Build 
    - name: Build with Maven
      run: mvn -B package -D skipTests=true --file pom.xml 
    
    # Docker Buildx Setting
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    # Docker Login
    - name: Docker Login
      uses: docker/login-action@v2.1.0
      with:
        # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_ID }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    # Docker Build & Push    
    - name: Docker Build and push
      uses: docker/build-push-action@v2
      with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: r2god7k/jaksim31-backend:latest
          cache-from: type=gha    # gha=Github Action Cache
          cache-to: type=gha,mode=max
    
    # SSH Connect
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          # port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            ls -a
            sudo su
            sudo chmod 666 /var/run/docker.sock
            docker pull r2god7k/jaksim31-backend:latest
    
